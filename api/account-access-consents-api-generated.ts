/* tslint:disable */
/* eslint-disable */
/*
Account Information API

In this document, you'll find the steps your organization needs to take to use our API services. Included in this guide are details of request and response messages used to support your organization’s integration. The intended audience for this document are **Technical Architects**, **Development Engineers**, **Test Engineers**, and **Operation & Maintenance Engineers** involved in development and support of your organization’s integration. Setting up our API Services is best completed with the assistance of your organization’s IT team, or someone with experience and knowledge of application programming interfaces. This should include experience with **JSON payloads**, **security** and **public key infrastructure (PKI)**. This Document describes the following request and response structure of HSBCnet - Account Information API. For detail implementation guidelines, please refer to the respective section from [develop.hsbc.com](https://develop.hsbc.com/ob-api-documentation/account-information-uk-personal-v319)


The version of the OpenAPI document: 3.1.11


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OBErrorResponse1 } from '../models';
// @ts-ignore
import { OBReadConsent1 } from '../models';
// @ts-ignore
import { OBReadConsent1Data } from '../models';
// @ts-ignore
import { OBReadConsentResponse1 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountAccessConsentsApi - axios parameter creator
 * @export
 */
export const AccountAccessConsentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint enables TPP to create account access consent. Supports all product types -Personal Current Account, Savings Account, Credit Cards, Foreign Currency Accounts, Global Money, Working Capital
         * @summary Create Account Access Consents
         * @param {OBReadConsent1} oBReadConsent1 
         * @param {string} [xFapiAuthDate] The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU\&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsent: async (oBReadConsent1: OBReadConsent1, xFapiAuthDate?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oBReadConsent1' is not null or undefined
            assertParamExists('createConsent', 'oBReadConsent1', oBReadConsent1)
            const localVarPath = `/account-access-consents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication TPPOAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "TPPOAuth2Security", ["accounts"], configuration)
            if (xFapiAuthDate != null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress != null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId != null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xCustomerUserAgent != null) {
                localVarHeaderParameter['x-customer-user-agent'] = String(xCustomerUserAgent);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: oBReadConsent1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account-access-consents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(oBReadConsent1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint enables TPP to delete account access consent
         * @summary Delete Account Access Consents
         * @param {string} consentId ConsentId
         * @param {string} [xFapiAuthDate] The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU\&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConsent: async (consentId: string, xFapiAuthDate?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('deleteConsent', 'consentId', consentId)
            const localVarPath = `/account-access-consents/{ConsentId}`
                .replace(`{${"ConsentId"}}`, encodeURIComponent(String(consentId !== undefined ? consentId : `-ConsentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication TPPOAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "TPPOAuth2Security", ["accounts"], configuration)
            if (xFapiAuthDate != null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress != null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId != null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xCustomerUserAgent != null) {
                localVarHeaderParameter['x-customer-user-agent'] = String(xCustomerUserAgent);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account-access-consents/{ConsentId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint enables TPP to get account access consent by ConsentId. Supports all product types -Personal Current Account, Savings Account, Credit Cards, Foreign Currency Accounts, Global Money Working Capital
         * @summary Get Account Access Consents
         * @param {string} consentId ConsentId
         * @param {string} [xFapiAuthDate] The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
         * @param {string} [xFapiCustomerIpAddress] The PSU\&#39;s IP address if the PSU is currently logged in with the TPP.
         * @param {string} [xFapiInteractionId] An RFC4122 UID used as a correlation id.
         * @param {string} [xCustomerUserAgent] Indicates the user-agent that the PSU is using.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByConsentId: async (consentId: string, xFapiAuthDate?: string, xFapiCustomerIpAddress?: string, xFapiInteractionId?: string, xCustomerUserAgent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('getByConsentId', 'consentId', consentId)
            const localVarPath = `/account-access-consents/{ConsentId}`
                .replace(`{${"ConsentId"}}`, encodeURIComponent(String(consentId !== undefined ? consentId : `-ConsentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication TPPOAuth2Security required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "TPPOAuth2Security", ["accounts"], configuration)
            if (xFapiAuthDate != null) {
                localVarHeaderParameter['x-fapi-auth-date'] = String(xFapiAuthDate);
            }

            if (xFapiCustomerIpAddress != null) {
                localVarHeaderParameter['x-fapi-customer-ip-address'] = String(xFapiCustomerIpAddress);
            }

            if (xFapiInteractionId != null) {
                localVarHeaderParameter['x-fapi-interaction-id'] = String(xFapiInteractionId);
            }

            if (xCustomerUserAgent != null) {
                localVarHeaderParameter['x-customer-user-agent'] = String(xCustomerUserAgent);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/account-access-consents/{ConsentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountAccessConsentsApi - functional programming interface
 * @export
 */
export const AccountAccessConsentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountAccessConsentsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint enables TPP to create account access consent. Supports all product types -Personal Current Account, Savings Account, Credit Cards, Foreign Currency Accounts, Global Money, Working Capital
         * @summary Create Account Access Consents
         * @param {AccountAccessConsentsApiCreateConsentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConsent(requestParameters: AccountAccessConsentsApiCreateConsentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OBReadConsentResponse1>> {
            const oBReadConsent1: OBReadConsent1 = {
                Data: requestParameters.Data,
                Risk: requestParameters.Risk
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConsent(oBReadConsent1, requestParameters.xFapiAuthDate, requestParameters.xFapiCustomerIpAddress, requestParameters.xFapiInteractionId, requestParameters.xCustomerUserAgent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint enables TPP to delete account access consent
         * @summary Delete Account Access Consents
         * @param {AccountAccessConsentsApiDeleteConsentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConsent(requestParameters: AccountAccessConsentsApiDeleteConsentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConsent(requestParameters.consentId, requestParameters.xFapiAuthDate, requestParameters.xFapiCustomerIpAddress, requestParameters.xFapiInteractionId, requestParameters.xCustomerUserAgent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint enables TPP to get account access consent by ConsentId. Supports all product types -Personal Current Account, Savings Account, Credit Cards, Foreign Currency Accounts, Global Money Working Capital
         * @summary Get Account Access Consents
         * @param {AccountAccessConsentsApiGetByConsentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByConsentId(requestParameters: AccountAccessConsentsApiGetByConsentIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OBReadConsentResponse1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByConsentId(requestParameters.consentId, requestParameters.xFapiAuthDate, requestParameters.xFapiCustomerIpAddress, requestParameters.xFapiInteractionId, requestParameters.xCustomerUserAgent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountAccessConsentsApi - factory interface
 * @export
 */
export const AccountAccessConsentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountAccessConsentsApiFp(configuration)
    return {
        /**
         * This endpoint enables TPP to create account access consent. Supports all product types -Personal Current Account, Savings Account, Credit Cards, Foreign Currency Accounts, Global Money, Working Capital
         * @summary Create Account Access Consents
         * @param {AccountAccessConsentsApiCreateConsentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsent(requestParameters: AccountAccessConsentsApiCreateConsentRequest, options?: AxiosRequestConfig): AxiosPromise<OBReadConsentResponse1> {
            return localVarFp.createConsent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint enables TPP to delete account access consent
         * @summary Delete Account Access Consents
         * @param {AccountAccessConsentsApiDeleteConsentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConsent(requestParameters: AccountAccessConsentsApiDeleteConsentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteConsent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint enables TPP to get account access consent by ConsentId. Supports all product types -Personal Current Account, Savings Account, Credit Cards, Foreign Currency Accounts, Global Money Working Capital
         * @summary Get Account Access Consents
         * @param {AccountAccessConsentsApiGetByConsentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByConsentId(requestParameters: AccountAccessConsentsApiGetByConsentIdRequest, options?: AxiosRequestConfig): AxiosPromise<OBReadConsentResponse1> {
            return localVarFp.getByConsentId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createConsent operation in AccountAccessConsentsApi.
 * @export
 * @interface AccountAccessConsentsApiCreateConsentRequest
 */
export type AccountAccessConsentsApiCreateConsentRequest = {
    
    /**
    * The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
    * @type {string}
    * @memberof AccountAccessConsentsApiCreateConsent
    */
    readonly xFapiAuthDate?: string
    
    /**
    * The PSU\'s IP address if the PSU is currently logged in with the TPP.
    * @type {string}
    * @memberof AccountAccessConsentsApiCreateConsent
    */
    readonly xFapiCustomerIpAddress?: string
    
    /**
    * An RFC4122 UID used as a correlation id.
    * @type {string}
    * @memberof AccountAccessConsentsApiCreateConsent
    */
    readonly xFapiInteractionId?: string
    
    /**
    * Indicates the user-agent that the PSU is using.
    * @type {string}
    * @memberof AccountAccessConsentsApiCreateConsent
    */
    readonly xCustomerUserAgent?: string
    
} & OBReadConsent1

/**
 * Request parameters for deleteConsent operation in AccountAccessConsentsApi.
 * @export
 * @interface AccountAccessConsentsApiDeleteConsentRequest
 */
export type AccountAccessConsentsApiDeleteConsentRequest = {
    
    /**
    * ConsentId
    * @type {string}
    * @memberof AccountAccessConsentsApiDeleteConsent
    */
    readonly consentId: string
    
    /**
    * The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
    * @type {string}
    * @memberof AccountAccessConsentsApiDeleteConsent
    */
    readonly xFapiAuthDate?: string
    
    /**
    * The PSU\'s IP address if the PSU is currently logged in with the TPP.
    * @type {string}
    * @memberof AccountAccessConsentsApiDeleteConsent
    */
    readonly xFapiCustomerIpAddress?: string
    
    /**
    * An RFC4122 UID used as a correlation id.
    * @type {string}
    * @memberof AccountAccessConsentsApiDeleteConsent
    */
    readonly xFapiInteractionId?: string
    
    /**
    * Indicates the user-agent that the PSU is using.
    * @type {string}
    * @memberof AccountAccessConsentsApiDeleteConsent
    */
    readonly xCustomerUserAgent?: string
    
}

/**
 * Request parameters for getByConsentId operation in AccountAccessConsentsApi.
 * @export
 * @interface AccountAccessConsentsApiGetByConsentIdRequest
 */
export type AccountAccessConsentsApiGetByConsentIdRequest = {
    
    /**
    * ConsentId
    * @type {string}
    * @memberof AccountAccessConsentsApiGetByConsentId
    */
    readonly consentId: string
    
    /**
    * The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
    * @type {string}
    * @memberof AccountAccessConsentsApiGetByConsentId
    */
    readonly xFapiAuthDate?: string
    
    /**
    * The PSU\'s IP address if the PSU is currently logged in with the TPP.
    * @type {string}
    * @memberof AccountAccessConsentsApiGetByConsentId
    */
    readonly xFapiCustomerIpAddress?: string
    
    /**
    * An RFC4122 UID used as a correlation id.
    * @type {string}
    * @memberof AccountAccessConsentsApiGetByConsentId
    */
    readonly xFapiInteractionId?: string
    
    /**
    * Indicates the user-agent that the PSU is using.
    * @type {string}
    * @memberof AccountAccessConsentsApiGetByConsentId
    */
    readonly xCustomerUserAgent?: string
    
}

/**
 * AccountAccessConsentsApiGenerated - object-oriented interface
 * @export
 * @class AccountAccessConsentsApiGenerated
 * @extends {BaseAPI}
 */
export class AccountAccessConsentsApiGenerated extends BaseAPI {
    /**
     * This endpoint enables TPP to create account access consent. Supports all product types -Personal Current Account, Savings Account, Credit Cards, Foreign Currency Accounts, Global Money, Working Capital
     * @summary Create Account Access Consents
     * @param {AccountAccessConsentsApiCreateConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAccessConsentsApiGenerated
     */
    public createConsent(requestParameters: AccountAccessConsentsApiCreateConsentRequest, options?: AxiosRequestConfig) {
        return AccountAccessConsentsApiFp(this.configuration).createConsent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint enables TPP to delete account access consent
     * @summary Delete Account Access Consents
     * @param {AccountAccessConsentsApiDeleteConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAccessConsentsApiGenerated
     */
    public deleteConsent(requestParameters: AccountAccessConsentsApiDeleteConsentRequest, options?: AxiosRequestConfig) {
        return AccountAccessConsentsApiFp(this.configuration).deleteConsent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint enables TPP to get account access consent by ConsentId. Supports all product types -Personal Current Account, Savings Account, Credit Cards, Foreign Currency Accounts, Global Money Working Capital
     * @summary Get Account Access Consents
     * @param {AccountAccessConsentsApiGetByConsentIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAccessConsentsApiGenerated
     */
    public getByConsentId(requestParameters: AccountAccessConsentsApiGetByConsentIdRequest, options?: AxiosRequestConfig) {
        return AccountAccessConsentsApiFp(this.configuration).getByConsentId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
